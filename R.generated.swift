//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `Barossa`.
    static let barossa = Rswift.ColorResource(bundle: R.hostingBundle, name: "Barossa")
    /// Color `Dropdown Shadow`.
    static let dropdownShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dropdown Shadow")
    /// Color `Mulberry`.
    static let mulberry = Rswift.ColorResource(bundle: R.hostingBundle, name: "Mulberry")
    /// Color `Pale Pink`.
    static let palePink = Rswift.ColorResource(bundle: R.hostingBundle, name: "Pale Pink")
    /// Color `Selected Segment Pink`.
    static let selectedSegmentPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "Selected Segment Pink")
    /// Color `Selected Segment`.
    static let selectedSegment = Rswift.ColorResource(bundle: R.hostingBundle, name: "Selected Segment")
    /// Color `Sundown`.
    static let sundown = Rswift.ColorResource(bundle: R.hostingBundle, name: "Sundown")
    /// Color `Text Field Shadow`.
    static let textFieldShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Text Field Shadow")
    /// Color `Text Primary`.
    static let textPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "Text Primary")
    /// Color `Toast Color`.
    static let toastColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Toast Color")
    /// Color `View Shadow`.
    static let viewShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "View Shadow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Barossa", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func barossa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.barossa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dropdown Shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dropdownShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dropdownShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Mulberry", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mulberry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mulberry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Pale Pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palePink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palePink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Selected Segment Pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedSegmentPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedSegmentPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Selected Segment", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedSegment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedSegment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Sundown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sundown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sundown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Text Field Shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Text Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Toast Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func toastColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.toastColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "View Shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func viewShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.viewShadow, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `A Boy`.
    static let aBoy = Rswift.ImageResource(bundle: R.hostingBundle, name: "A Boy")
    /// Image `A Girl`.
    static let aGirl = Rswift.ImageResource(bundle: R.hostingBundle, name: "A Girl")
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `Baby`.
    static let baby = Rswift.ImageResource(bundle: R.hostingBundle, name: "Baby")
    /// Image `Blood Loss Single`.
    static let bloodLossSingle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Blood Loss Single")
    /// Image `Blood Loss`.
    static let bloodLoss = Rswift.ImageResource(bundle: R.hostingBundle, name: "Blood Loss")
    /// Image `Calculator`.
    static let calculator = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calculator")
    /// Image `Chevron Bottom`.
    static let chevronBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron Bottom")
    /// Image `Chevron Next`.
    static let chevronNext = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron Next")
    /// Image `Chevron Previous`.
    static let chevronPrevious = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron Previous")
    /// Image `Chevron Top`.
    static let chevronTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron Top")
    /// Image `Circle Empty`.
    static let circleEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circle Empty")
    /// Image `Circle Filled`.
    static let circleFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circle Filled")
    /// Image `Dots`.
    static let dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dots")
    /// Image `Edit-Unfilled`.
    static let editUnfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit-Unfilled")
    /// Image `Edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit")
    /// Image `Female Symbol Small`.
    static let femaleSymbolSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Female Symbol Small")
    /// Image `Female Symbol`.
    static let femaleSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "Female Symbol")
    /// Image `Gender Symbols`.
    static let genderSymbols = Rswift.ImageResource(bundle: R.hostingBundle, name: "Gender Symbols")
    /// Image `LaunchScreen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreen")
    /// Image `Male Symbol Small`.
    static let maleSymbolSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Male Symbol Small")
    /// Image `Male Symbol`.
    static let maleSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "Male Symbol")
    /// Image `Menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu")
    /// Image `Premium Card One`.
    static let premiumCardOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "Premium Card One")
    /// Image `Premium Card Three`.
    static let premiumCardThree = Rswift.ImageResource(bundle: R.hostingBundle, name: "Premium Card Three")
    /// Image `Premium Card Two`.
    static let premiumCardTwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Premium Card Two")
    /// Image `Union-Min`.
    static let unionMin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Union-Min")
    /// Image `Union`.
    static let union = Rswift.ImageResource(bundle: R.hostingBundle, name: "Union")
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `menuBabyQuestion`.
    static let menuBabyQuestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuBabyQuestion")
    /// Image `menuBaby`.
    static let menuBaby = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuBaby")
    /// Image `menuCheckmark`.
    static let menuCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuCheckmark")
    /// Image `menuInfo`.
    static let menuInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuInfo")
    /// Image `menuParents`.
    static let menuParents = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuParents")
    /// Image `menuPremium`.
    static let menuPremium = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuPremium")
    /// Image `menuWrite`.
    static let menuWrite = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuWrite")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "A Boy", bundle: ..., traitCollection: ...)`
    static func aBoy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aBoy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "A Girl", bundle: ..., traitCollection: ...)`
    static func aGirl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aGirl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Baby", bundle: ..., traitCollection: ...)`
    static func baby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Blood Loss Single", bundle: ..., traitCollection: ...)`
    static func bloodLossSingle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bloodLossSingle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Blood Loss", bundle: ..., traitCollection: ...)`
    static func bloodLoss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bloodLoss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calculator", bundle: ..., traitCollection: ...)`
    static func calculator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calculator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chevron Bottom", bundle: ..., traitCollection: ...)`
    static func chevronBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronBottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chevron Next", bundle: ..., traitCollection: ...)`
    static func chevronNext(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronNext, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chevron Previous", bundle: ..., traitCollection: ...)`
    static func chevronPrevious(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronPrevious, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chevron Top", bundle: ..., traitCollection: ...)`
    static func chevronTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Circle Empty", bundle: ..., traitCollection: ...)`
    static func circleEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Circle Filled", bundle: ..., traitCollection: ...)`
    static func circleFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dots", bundle: ..., traitCollection: ...)`
    static func dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Edit-Unfilled", bundle: ..., traitCollection: ...)`
    static func editUnfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editUnfilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Female Symbol Small", bundle: ..., traitCollection: ...)`
    static func femaleSymbolSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.femaleSymbolSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Female Symbol", bundle: ..., traitCollection: ...)`
    static func femaleSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.femaleSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Gender Symbols", bundle: ..., traitCollection: ...)`
    static func genderSymbols(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.genderSymbols, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchScreen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Male Symbol Small", bundle: ..., traitCollection: ...)`
    static func maleSymbolSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maleSymbolSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Male Symbol", bundle: ..., traitCollection: ...)`
    static func maleSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maleSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Premium Card One", bundle: ..., traitCollection: ...)`
    static func premiumCardOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.premiumCardOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Premium Card Three", bundle: ..., traitCollection: ...)`
    static func premiumCardThree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.premiumCardThree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Premium Card Two", bundle: ..., traitCollection: ...)`
    static func premiumCardTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.premiumCardTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Union", bundle: ..., traitCollection: ...)`
    static func union(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.union, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Union-Min", bundle: ..., traitCollection: ...)`
    static func unionMin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unionMin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuBaby", bundle: ..., traitCollection: ...)`
    static func menuBaby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuBaby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuBabyQuestion", bundle: ..., traitCollection: ...)`
    static func menuBabyQuestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuBabyQuestion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuCheckmark", bundle: ..., traitCollection: ...)`
    static func menuCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuInfo", bundle: ..., traitCollection: ...)`
    static func menuInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuParents", bundle: ..., traitCollection: ...)`
    static func menuParents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuParents, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuPremium", bundle: ..., traitCollection: ...)`
    static func menuPremium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuPremium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuWrite", bundle: ..., traitCollection: ...)`
    static func menuWrite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuWrite, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizableString` struct is generated, and contains static references to 128 localization keys.
    struct localizableString {
      /// ru translation:     Данное приложение является инструментом для проведения расчета по определению пола будущего ребенка по двум наиболее известным методам.      Результаты расчета обоих методов показывают лишь вероятность рождения ребенка того или иного пола, так как фактический пол ребенка может зависеть от многих факторов и физиологических особенностей организмов родителей.
      ///
      /// Locales: ru
      static let aboutApp = Rswift.StringResource(key: "aboutApp", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:     Данный метод был разработан Михаилом Фрейманом по статистике профессора медицинского факультета Нижегородского государственного университета Святослава Добротина. Данная статистика была составлена и проверена во время работы профессора Добротина главным врачом в роддоме №1 города Горького. В 99 случаях из 100 прогноз был точен.      Супруги, решившие завести ребенка, вначале должны определить день возможного зачатия, который приходится на 10–15 день с начала очередной менструации. Далее по датам рождения родителей определите, какой пол ребенка ожидается для выбранного вами дня зачатия. Если результат прогноза окажется нежелательным, то зачатие следует перенести на следующий месяц и повторить расчет.
      ///
      /// Locales: ru
      static let about_freymanDobrotin = Rswift.StringResource(key: "about_freymanDobrotin", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:     Согласно этому методу пол ребенка зависит от того, у кого из родителей кровь более «свежая». То есть, если у папы дата последнего обновления крови позже маминой даты, то будет мальчик. И наоборот.      Кровь обладает свойством обновляться. Женский цикл обновления проходит 1 раз в 3 года, мужской цикл обновления проходит 1 раз в 4 года. В случае, когда женский цикл прошел раньше – пол эмбриона будет женский, если раньше прошел мужской цикл – пол эмбриона будет мужской. В этом случае важную роль играет резус-фактор. Если мать - носительница отрицательного резус-фактора, то пол малыша будет зависеть от того, у кого кровь более «застоялая».      На циклы обновления крови прямо влияет потяря крови. Под потерей крови подразумевается потеря больше 400 мл. Например: полостная операция (лапароскопия), переливание крови, донорство, несчастные случаи (ДТП, бытовая травма, травма на производстве), и т.д. Для женщин стоит учесть роды (первые или последние), прерывание беременности, потеря плода. В рассчётах учитывается дата самой последней потери крови.
      ///
      /// Locales: ru
      static let about_bloodRenewal = Rswift.StringResource(key: "about_bloodRenewal", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $1 / 1 месяц
      ///
      /// Locales: ru
      static let subscription_oneMonth = Rswift.StringResource(key: "subscription_oneMonth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $2,5 / 3 месяца
      ///
      /// Locales: ru
      static let subscription_threeMonths = Rswift.StringResource(key: "subscription_threeMonths", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $4,5 / 6 месяцов
      ///
      /// Locales: ru
      static let subscription_sixMonths = Rswift.StringResource(key: "subscription_sixMonths", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: $8 / 1 год
      ///
      /// Locales: ru
      static let subscription_oneYear = Rswift.StringResource(key: "subscription_oneYear", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 1 месяц
      ///
      /// Locales: ru
      static let oneMonth = Rswift.StringResource(key: "oneMonth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 1. Не следует заниматься любовью 3–4 дня до расчетного дня овуляции. Количество клеток спермы будет больше. 2. Для будущих отцов исключены горячие ванны, по крайней мере, в течение 7 дней. 3. Концепция действует лишь во время акта любви, направленного на создание плода. 4. Половой контакт после зачатия проводится с использованием контрацептивных средств (презервативов). 5. При создании плода доведение состояния до оргазма - лучшее состояние. 6. Наслаждайтесь более длинной прелюдией для достижения максимальной концентрации сперматозоидов. 7. Поза должна обеспечить глубокое проникновение. 8. Кофе перед актом любви (за 2 часа до) повысит число сперматозоидов. 9. Не используются смазочные средства.  За два месяца до зачатия следует придерживаться специальной диеты, которая будет окислять организм и позволит мальчикам-сперматозоидам выжить. Для того чтобы зачать мальчика, будущие родители должны: * Есть мясо, картофель, соленые огурцы, колбасы, грибы, бананы, абрикосы, апельсины, персики и инжир. * Пить чай, кофе и фруктовые соки. * Исключить из рациона молочные продукты, капусту, орехи и бобы. * Нежелательно есть яйца, креветки, сыр, орехи, молочный шоколад и зеленый салат, пить молочные коктейли, мягкую воду и минеральную воду с кальцием. Такая диета дает хорошие результаты. Она помогает создать более кислую среду. Это влияет на биохимический состав яйцеклетки, которая становится более благоприятной для зачатия мальчика
      ///
      /// Locales: ru
      static let recommendations_boy = Rswift.StringResource(key: "recommendations_boy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 2 месяца
      ///
      /// Locales: ru
      static let twoMonth = Rswift.StringResource(key: "twoMonth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 3 месяца
      ///
      /// Locales: ru
      static let threeMonth = Rswift.StringResource(key: "threeMonth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 40(9 месяцев)
      ///
      /// Locales: ru
      static let pregnancyDuration_placeholder = Rswift.StringResource(key: "pregnancyDuration_placeholder", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 6 месяцев
      ///
      /// Locales: ru
      static let sixMonth = Rswift.StringResource(key: "sixMonth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Август
      ///
      /// Locales: ru
      static let august = Rswift.StringResource(key: "august", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Апрель
      ///
      /// Locales: ru
      static let april = Rswift.StringResource(key: "april", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Благоприятные дни для зачатия девочки
      ///
      /// Locales: ru
      static let favorableConceptionDaysForGirl = Rswift.StringResource(key: "favorableConceptionDaysForGirl", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Благоприятные дни для зачатия мальчика
      ///
      /// Locales: ru
      static let favorableConceptionDaysForBoy = Rswift.StringResource(key: "favorableConceptionDaysForBoy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Большая потеря крови при несчастном случае
      ///
      /// Locales: ru
      static let accident = Rswift.StringResource(key: "accident", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Воскресенье
      ///
      /// Locales: ru
      static let dayOfWeek_sunday = Rswift.StringResource(key: "dayOfWeek_sunday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Время девочек – 2–3 дня до овуляции. Именно в этот момент яйцеклетка предрасположена к принятию "женских" Х-сперматозоидов. Среда, состояние идеальны. Женщине достаточно вести календарь своего цикла, и тогда станет просто высчитать благоприятный день.  Для того чтобы увеличить шансы рождения девочки: 1. Поза должна обеспечить неглубокое проникновение (классическая). 2. Акты любви можно проводить и до и после дня зачатия. 3. Продолжительность фиксации спермы в организме составляет 20 мин.  Диета для зачатия девочки: * Мясные продукты (говядина, телятина, баранина) * Молоко, творог, сметана * Фрукты * Чай, фруктовые соки, какао
      ///
      /// Locales: ru
      static let recommendations_girl = Rswift.StringResource(key: "recommendations_girl", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вс
      ///
      /// Locales: ru
      static let dayOfWeek_short_sunday = Rswift.StringResource(key: "dayOfWeek_short_sunday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вт
      ///
      /// Locales: ru
      static let dayOfWeek_short_tuesday = Rswift.StringResource(key: "dayOfWeek_short_tuesday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вторник
      ///
      /// Locales: ru
      static let dayOfWeek_tuesday = Rswift.StringResource(key: "dayOfWeek_tuesday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы действительно хотите удалить?
      ///
      /// Locales: ru
      static let alert_delete_message = Rswift.StringResource(key: "alert_delete_message", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы можете выбрать желаемый пол ребенка, и приложение рассчитает благоприятные даты зачатия.
      ///
      /// Locales: ru
      static let premium_description_one = Rswift.StringResource(key: "premium_description_one", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы можете выбрать желаемый пол ребенка, и приложение рассчитает благоприятные даты зачатия.
      ///
      /// Locales: ru
      static let premium_description_three = Rswift.StringResource(key: "premium_description_three", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите группу крови
      ///
      /// Locales: ru
      static let chooseBloodGroup = Rswift.StringResource(key: "chooseBloodGroup", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите период предполагаемого зачатия
      ///
      /// Locales: ru
      static let chooseConceptionDatePeriod = Rswift.StringResource(key: "chooseConceptionDatePeriod", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите пол будущего ребенка
      ///
      /// Locales: ru
      static let choosePlannedBabyGender = Rswift.StringResource(key: "choosePlannedBabyGender", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите пол родителя
      ///
      /// Locales: ru
      static let chooseParentGender = Rswift.StringResource(key: "chooseParentGender", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбрать из сохраненных
      ///
      /// Locales: ru
      static let dropDown_chooseSaved = Rswift.StringResource(key: "dropDown_chooseSaved", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Группа крови
      ///
      /// Locales: ru
      static let bloodGroup = Rswift.StringResource(key: "bloodGroup", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ДД/ММ/ГГГГ
      ///
      /// Locales: ru
      static let dateFormat = Rswift.StringResource(key: "dateFormat", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата зачатия: 
      ///
      /// Locales: ru
      static let conceptionDate = Rswift.StringResource(key: "conceptionDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата потери крови
      ///
      /// Locales: ru
      static let bloodLoss_date_title = Rswift.StringResource(key: "bloodLoss_date_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата рождения
      ///
      /// Locales: ru
      static let birthdayDate = Rswift.StringResource(key: "birthdayDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата рождения матери
      ///
      /// Locales: ru
      static let femaleBirthdayDate = Rswift.StringResource(key: "femaleBirthdayDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата рождения отца
      ///
      /// Locales: ru
      static let maleBirthdayDate = Rswift.StringResource(key: "maleBirthdayDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата рождения ребенка
      ///
      /// Locales: ru
      static let babyBirthdayDate = Rswift.StringResource(key: "babyBirthdayDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Декабрь
      ///
      /// Locales: ru
      static let december = Rswift.StringResource(key: "december", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Донорство
      ///
      /// Locales: ru
      static let bloodDonation = Rswift.StringResource(key: "bloodDonation", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Женский
      ///
      /// Locales: ru
      static let femaleGender = Rswift.StringResource(key: "femaleGender", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Идет приобретение подписки
      ///
      /// Locales: ru
      static let purchasing_subscription = Rswift.StringResource(key: "purchasing_subscription", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя родителя
      ///
      /// Locales: ru
      static let parentName = Rswift.StringResource(key: "parentName", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Июль
      ///
      /// Locales: ru
      static let july = Rswift.StringResource(key: "july", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Июнь
      ///
      /// Locales: ru
      static let june = Rswift.StringResource(key: "june", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: К потери крови относится :
      ///
      /// Locales: ru
      static let relatedToBloodLoss = Rswift.StringResource(key: "relatedToBloodLoss", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Календарь фертильности
      ///
      /// Locales: ru
      static let sideMenu_calendar = Rswift.StringResource(key: "sideMenu_calendar", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Купить
      ///
      /// Locales: ru
      static let buttonBuy = Rswift.StringResource(key: "buttonBuy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Май
      ///
      /// Locales: ru
      static let may = Rswift.StringResource(key: "may", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Март
      ///
      /// Locales: ru
      static let march = Rswift.StringResource(key: "march", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мать
      ///
      /// Locales: ru
      static let mother_section_title = Rswift.StringResource(key: "mother_section_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Меню
      ///
      /// Locales: ru
      static let sideMenu_title = Rswift.StringResource(key: "sideMenu_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Метод Фреймана-Добротина
      ///
      /// Locales: ru
      static let freymanDobrotingMethod = Rswift.StringResource(key: "freymanDobrotingMethod", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Метод обновления крови
      ///
      /// Locales: ru
      static let bloodRenewalMethod = Rswift.StringResource(key: "bloodRenewalMethod", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мужской
      ///
      /// Locales: ru
      static let maleGender = Rswift.StringResource(key: "maleGender", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Написать разработчикам
      ///
      /// Locales: ru
      static let sideMenu_write = Rswift.StringResource(key: "sideMenu_write", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не все поля были заполнены
      ///
      /// Locales: ru
      static let toast_missingInput = Rswift.StringResource(key: "toast_missingInput", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не найдено ни одной благоприятной даты. Попробуйте увеличить сроки поиска
      ///
      /// Locales: ru
      static let toast_noFavorableDates = Rswift.StringResource(key: "toast_noFavorableDates", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не удалось приобрести подписку
      ///
      /// Locales: ru
      static let purchasing_subscription_failure = Rswift.StringResource(key: "purchasing_subscription_failure", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Необходимо указать дату последней потери крови
      ///
      /// Locales: ru
      static let lastDateOfBloodLossRequired = Rswift.StringResource(key: "lastDateOfBloodLossRequired", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ноябрь
      ///
      /// Locales: ru
      static let november = Rswift.StringResource(key: "november", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: О приложении
      ///
      /// Locales: ru
      static let sideMenu_about = Rswift.StringResource(key: "sideMenu_about", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ОК
      ///
      /// Locales: ru
      static let alert_ok = Rswift.StringResource(key: "alert_ok", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Октябрь
      ///
      /// Locales: ru
      static let october = Rswift.StringResource(key: "october", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отец
      ///
      /// Locales: ru
      static let father_section_title = Rswift.StringResource(key: "father_section_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отмена
      ///
      /// Locales: ru
      static let alert_cancel = Rswift.StringResource(key: "alert_cancel", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      ///
      /// Locales: ru
      static let button_cancel = Rswift.StringResource(key: "button_cancel", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Переливание крови
      ///
      /// Locales: ru
      static let bloodTransition = Rswift.StringResource(key: "bloodTransition", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static let page_title_genderPlanning = Rswift.StringResource(key: "page_title_genderPlanning", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static let premium_title_one = Rswift.StringResource(key: "premium_title_one", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static let sideMenu_planning = Rswift.StringResource(key: "sideMenu_planning", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Планировать
      ///
      /// Locales: ru
      static let planning_button_title = Rswift.StringResource(key: "planning_button_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пн
      ///
      /// Locales: ru
      static let dayOfWeek_short_monday = Rswift.StringResource(key: "dayOfWeek_short_monday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: По данному методу одинаковый шанс на зачатие мальчика или девочки
      ///
      /// Locales: ru
      static let toast_unknownGender = Rswift.StringResource(key: "toast_unknownGender", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подписка успешно приобретена
      ///
      /// Locales: ru
      static let purchasing_subscription_success = Rswift.StringResource(key: "purchasing_subscription_success", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подробнее о методе
      ///
      /// Locales: ru
      static let aboutMethod = Rswift.StringResource(key: "aboutMethod", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подробнее о методе
      ///
      /// Locales: ru
      static let page_title_aboutMethod = Rswift.StringResource(key: "page_title_aboutMethod", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подтверждение удаления
      ///
      /// Locales: ru
      static let alert_delete_title = Rswift.StringResource(key: "alert_delete_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Поздравляем!  У вас будет девочка!
      ///
      /// Locales: ru
      static let youHaveAGirl = Rswift.StringResource(key: "youHaveAGirl", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Поздравляем!  У вас будет мальчик!
      ///
      /// Locales: ru
      static let youHaveABoy = Rswift.StringResource(key: "youHaveABoy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Показать все даты
      ///
      /// Locales: ru
      static let showAllDates = Rswift.StringResource(key: "showAllDates", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Полостная операция или лапароскопи́я
      ///
      /// Locales: ru
      static let laparoscopy = Rswift.StringResource(key: "laparoscopy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Понедельник
      ///
      /// Locales: ru
      static let dayOfWeek_monday = Rswift.StringResource(key: "dayOfWeek_monday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Потеря крови
      ///
      /// Locales: ru
      static let bloodLoss = Rswift.StringResource(key: "bloodLoss", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Потеря плода
      ///
      /// Locales: ru
      static let fetalLoss = Rswift.StringResource(key: "fetalLoss", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Появится возможность сохранить данные о родителях, чтобы при повторном расчете не вводить их заново.
      ///
      /// Locales: ru
      static let premium_description_two = Rswift.StringResource(key: "premium_description_two", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Предположительная дата зачатия
      ///
      /// Locales: ru
      static let estimatedConceptionDate = Rswift.StringResource(key: "estimatedConceptionDate", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Преимущества
      ///
      /// Locales: ru
      static let premium_title_three = Rswift.StringResource(key: "premium_title_three", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Премиум подписка
      ///
      /// Locales: ru
      static let sideMenu_premium = Rswift.StringResource(key: "sideMenu_premium", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Прерывание беременности
      ///
      /// Locales: ru
      static let abortion = Rswift.StringResource(key: "abortion", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Принять
      ///
      /// Locales: ru
      static let button_done = Rswift.StringResource(key: "button_done", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Приобретите премиум подписку и спланируйте пол будущего ребенка. Сохраняйте результаты с благоприятными датами зачатия и информацией о родителях для последующих расчетов
      ///
      /// Locales: ru
      static let subscription_description = Rswift.StringResource(key: "subscription_description", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проверка на рожденных детях
      ///
      /// Locales: ru
      static let checkOnBornChildrens = Rswift.StringResource(key: "checkOnBornChildrens", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пт
      ///
      /// Locales: ru
      static let dayOfWeek_short_friday = Rswift.StringResource(key: "dayOfWeek_short_friday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пятница
      ///
      /// Locales: ru
      static let dayOfWeek_friday = Rswift.StringResource(key: "dayOfWeek_friday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рассчитать
      ///
      /// Locales: ru
      static let calculate_button_title = Rswift.StringResource(key: "calculate_button_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Расчет
      ///
      /// Locales: ru
      static let calculation = Rswift.StringResource(key: "calculation", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Резус-фактор
      ///
      /// Locales: ru
      static let rhesusFactor = Rswift.StringResource(key: "rhesusFactor", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рекомендации
      ///
      /// Locales: ru
      static let page_title_recommendations = Rswift.StringResource(key: "page_title_recommendations", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рекомендации
      ///
      /// Locales: ru
      static let recommendations_button_title = Rswift.StringResource(key: "recommendations_button_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Родители
      ///
      /// Locales: ru
      static let page_title_parents = Rswift.StringResource(key: "page_title_parents", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Родители
      ///
      /// Locales: ru
      static let sideMenu_parents = Rswift.StringResource(key: "sideMenu_parents", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Роды (первые или последние)
      ///
      /// Locales: ru
      static let givingBirth = Rswift.StringResource(key: "givingBirth", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сб
      ///
      /// Locales: ru
      static let dayOfWeek_short_saturday = Rswift.StringResource(key: "dayOfWeek_short_saturday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сентябрь
      ///
      /// Locales: ru
      static let september = Rswift.StringResource(key: "september", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сколько недель длилась беременность
      ///
      /// Locales: ru
      static let pregnancyDuration = Rswift.StringResource(key: "pregnancyDuration", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранение родителей
      ///
      /// Locales: ru
      static let premium_title_two = Rswift.StringResource(key: "premium_title_two", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранение родителя
      ///
      /// Locales: ru
      static let parent_screen_title = Rswift.StringResource(key: "parent_screen_title", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохраненные расчеты
      ///
      /// Locales: ru
      static let sideMenu_savedResults = Rswift.StringResource(key: "sideMenu_savedResults", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранить
      ///
      /// Locales: ru
      static let buttonSave = Rswift.StringResource(key: "buttonSave", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранить маму
      ///
      /// Locales: ru
      static let dropDown_saveMother = Rswift.StringResource(key: "dropDown_saveMother", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранить отца
      ///
      /// Locales: ru
      static let dropDown_saveFather = Rswift.StringResource(key: "dropDown_saveFather", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ср
      ///
      /// Locales: ru
      static let dayOfWeek_short_wednesday = Rswift.StringResource(key: "dayOfWeek_short_wednesday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Среда
      ///
      /// Locales: ru
      static let dayOfWeek_wednesday = Rswift.StringResource(key: "dayOfWeek_wednesday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Суббота
      ///
      /// Locales: ru
      static let dayOfWeek_saturday = Rswift.StringResource(key: "dayOfWeek_saturday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: У вас Девочка?  Вероятные даты зачатия:
      ///
      /// Locales: ru
      static let doYouHaveAGirl = Rswift.StringResource(key: "doYouHaveAGirl", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: У вас Мальчик?  Вероятные даты зачатия:
      ///
      /// Locales: ru
      static let doYouHaveABoy = Rswift.StringResource(key: "doYouHaveABoy", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Удалить
      ///
      /// Locales: ru
      static let alert_delete = Rswift.StringResource(key: "alert_delete", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Узнать пол ребенка
      ///
      /// Locales: ru
      static let page_title_genderPrediction = Rswift.StringResource(key: "page_title_genderPrediction", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Узнать пол ребенка
      ///
      /// Locales: ru
      static let sideMenu_genderPrediction = Rswift.StringResource(key: "sideMenu_genderPrediction", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Февраль
      ///
      /// Locales: ru
      static let february = Rswift.StringResource(key: "february", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Четверг
      ///
      /// Locales: ru
      static let dayOfWeek_thursday = Rswift.StringResource(key: "dayOfWeek_thursday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чт
      ///
      /// Locales: ru
      static let dayOfWeek_short_thursday = Rswift.StringResource(key: "dayOfWeek_short_thursday", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Экономия при годовой подписке - $4
      ///
      /// Locales: ru
      static let subscription_oneYear_saving = Rswift.StringResource(key: "subscription_oneYear_saving", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Экономия при подписке на 3 месяца - $0,5
      ///
      /// Locales: ru
      static let subscription_threeMonths_saving = Rswift.StringResource(key: "subscription_threeMonths_saving", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Экономия при подписке на 6 месяцев - $1,5
      ///
      /// Locales: ru
      static let subscription_sixMonths_saving = Rswift.StringResource(key: "subscription_sixMonths_saving", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Январь
      ///
      /// Locales: ru
      static let january = Rswift.StringResource(key: "january", tableName: "Localizable.string", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation:     Данное приложение является инструментом для проведения расчета по определению пола будущего ребенка по двум наиболее известным методам.      Результаты расчета обоих методов показывают лишь вероятность рождения ребенка того или иного пола, так как фактический пол ребенка может зависеть от многих факторов и физиологических особенностей организмов родителей.
      ///
      /// Locales: ru
      static func aboutApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutApp", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "aboutApp"
        }

        return NSLocalizedString("aboutApp", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation:     Данный метод был разработан Михаилом Фрейманом по статистике профессора медицинского факультета Нижегородского государственного университета Святослава Добротина. Данная статистика была составлена и проверена во время работы профессора Добротина главным врачом в роддоме №1 города Горького. В 99 случаях из 100 прогноз был точен.      Супруги, решившие завести ребенка, вначале должны определить день возможного зачатия, который приходится на 10–15 день с начала очередной менструации. Далее по датам рождения родителей определите, какой пол ребенка ожидается для выбранного вами дня зачатия. Если результат прогноза окажется нежелательным, то зачатие следует перенести на следующий месяц и повторить расчет.
      ///
      /// Locales: ru
      static func about_freymanDobrotin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about_freymanDobrotin", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "about_freymanDobrotin"
        }

        return NSLocalizedString("about_freymanDobrotin", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation:     Согласно этому методу пол ребенка зависит от того, у кого из родителей кровь более «свежая». То есть, если у папы дата последнего обновления крови позже маминой даты, то будет мальчик. И наоборот.      Кровь обладает свойством обновляться. Женский цикл обновления проходит 1 раз в 3 года, мужской цикл обновления проходит 1 раз в 4 года. В случае, когда женский цикл прошел раньше – пол эмбриона будет женский, если раньше прошел мужской цикл – пол эмбриона будет мужской. В этом случае важную роль играет резус-фактор. Если мать - носительница отрицательного резус-фактора, то пол малыша будет зависеть от того, у кого кровь более «застоялая».      На циклы обновления крови прямо влияет потяря крови. Под потерей крови подразумевается потеря больше 400 мл. Например: полостная операция (лапароскопия), переливание крови, донорство, несчастные случаи (ДТП, бытовая травма, травма на производстве), и т.д. Для женщин стоит учесть роды (первые или последние), прерывание беременности, потеря плода. В рассчётах учитывается дата самой последней потери крови.
      ///
      /// Locales: ru
      static func about_bloodRenewal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about_bloodRenewal", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "about_bloodRenewal"
        }

        return NSLocalizedString("about_bloodRenewal", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: $1 / 1 месяц
      ///
      /// Locales: ru
      static func subscription_oneMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_oneMonth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_oneMonth"
        }

        return NSLocalizedString("subscription_oneMonth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: $2,5 / 3 месяца
      ///
      /// Locales: ru
      static func subscription_threeMonths(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_threeMonths", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_threeMonths"
        }

        return NSLocalizedString("subscription_threeMonths", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: $4,5 / 6 месяцов
      ///
      /// Locales: ru
      static func subscription_sixMonths(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_sixMonths", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_sixMonths"
        }

        return NSLocalizedString("subscription_sixMonths", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: $8 / 1 год
      ///
      /// Locales: ru
      static func subscription_oneYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_oneYear", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_oneYear"
        }

        return NSLocalizedString("subscription_oneYear", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 1 месяц
      ///
      /// Locales: ru
      static func oneMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oneMonth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "oneMonth"
        }

        return NSLocalizedString("oneMonth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 1. Не следует заниматься любовью 3–4 дня до расчетного дня овуляции. Количество клеток спермы будет больше. 2. Для будущих отцов исключены горячие ванны, по крайней мере, в течение 7 дней. 3. Концепция действует лишь во время акта любви, направленного на создание плода. 4. Половой контакт после зачатия проводится с использованием контрацептивных средств (презервативов). 5. При создании плода доведение состояния до оргазма - лучшее состояние. 6. Наслаждайтесь более длинной прелюдией для достижения максимальной концентрации сперматозоидов. 7. Поза должна обеспечить глубокое проникновение. 8. Кофе перед актом любви (за 2 часа до) повысит число сперматозоидов. 9. Не используются смазочные средства.  За два месяца до зачатия следует придерживаться специальной диеты, которая будет окислять организм и позволит мальчикам-сперматозоидам выжить. Для того чтобы зачать мальчика, будущие родители должны: * Есть мясо, картофель, соленые огурцы, колбасы, грибы, бананы, абрикосы, апельсины, персики и инжир. * Пить чай, кофе и фруктовые соки. * Исключить из рациона молочные продукты, капусту, орехи и бобы. * Нежелательно есть яйца, креветки, сыр, орехи, молочный шоколад и зеленый салат, пить молочные коктейли, мягкую воду и минеральную воду с кальцием. Такая диета дает хорошие результаты. Она помогает создать более кислую среду. Это влияет на биохимический состав яйцеклетки, которая становится более благоприятной для зачатия мальчика
      ///
      /// Locales: ru
      static func recommendations_boy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommendations_boy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "recommendations_boy"
        }

        return NSLocalizedString("recommendations_boy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 2 месяца
      ///
      /// Locales: ru
      static func twoMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twoMonth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "twoMonth"
        }

        return NSLocalizedString("twoMonth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 3 месяца
      ///
      /// Locales: ru
      static func threeMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("threeMonth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "threeMonth"
        }

        return NSLocalizedString("threeMonth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 40(9 месяцев)
      ///
      /// Locales: ru
      static func pregnancyDuration_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pregnancyDuration_placeholder", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "pregnancyDuration_placeholder"
        }

        return NSLocalizedString("pregnancyDuration_placeholder", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: 6 месяцев
      ///
      /// Locales: ru
      static func sixMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sixMonth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sixMonth"
        }

        return NSLocalizedString("sixMonth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Август
      ///
      /// Locales: ru
      static func august(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("august", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "august"
        }

        return NSLocalizedString("august", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Апрель
      ///
      /// Locales: ru
      static func april(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("april", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "april"
        }

        return NSLocalizedString("april", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Благоприятные дни для зачатия девочки
      ///
      /// Locales: ru
      static func favorableConceptionDaysForGirl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favorableConceptionDaysForGirl", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "favorableConceptionDaysForGirl"
        }

        return NSLocalizedString("favorableConceptionDaysForGirl", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Благоприятные дни для зачатия мальчика
      ///
      /// Locales: ru
      static func favorableConceptionDaysForBoy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favorableConceptionDaysForBoy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "favorableConceptionDaysForBoy"
        }

        return NSLocalizedString("favorableConceptionDaysForBoy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Большая потеря крови при несчастном случае
      ///
      /// Locales: ru
      static func accident(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accident", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "accident"
        }

        return NSLocalizedString("accident", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Воскресенье
      ///
      /// Locales: ru
      static func dayOfWeek_sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_sunday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_sunday"
        }

        return NSLocalizedString("dayOfWeek_sunday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Время девочек – 2–3 дня до овуляции. Именно в этот момент яйцеклетка предрасположена к принятию "женских" Х-сперматозоидов. Среда, состояние идеальны. Женщине достаточно вести календарь своего цикла, и тогда станет просто высчитать благоприятный день.  Для того чтобы увеличить шансы рождения девочки: 1. Поза должна обеспечить неглубокое проникновение (классическая). 2. Акты любви можно проводить и до и после дня зачатия. 3. Продолжительность фиксации спермы в организме составляет 20 мин.  Диета для зачатия девочки: * Мясные продукты (говядина, телятина, баранина) * Молоко, творог, сметана * Фрукты * Чай, фруктовые соки, какао
      ///
      /// Locales: ru
      static func recommendations_girl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommendations_girl", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "recommendations_girl"
        }

        return NSLocalizedString("recommendations_girl", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вс
      ///
      /// Locales: ru
      static func dayOfWeek_short_sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_sunday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_sunday"
        }

        return NSLocalizedString("dayOfWeek_short_sunday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вт
      ///
      /// Locales: ru
      static func dayOfWeek_short_tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_tuesday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_tuesday"
        }

        return NSLocalizedString("dayOfWeek_short_tuesday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вторник
      ///
      /// Locales: ru
      static func dayOfWeek_tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_tuesday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_tuesday"
        }

        return NSLocalizedString("dayOfWeek_tuesday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вы действительно хотите удалить?
      ///
      /// Locales: ru
      static func alert_delete_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_delete_message", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "alert_delete_message"
        }

        return NSLocalizedString("alert_delete_message", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вы можете выбрать желаемый пол ребенка, и приложение рассчитает благоприятные даты зачатия.
      ///
      /// Locales: ru
      static func premium_description_one(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_description_one", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_description_one"
        }

        return NSLocalizedString("premium_description_one", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Вы можете выбрать желаемый пол ребенка, и приложение рассчитает благоприятные даты зачатия.
      ///
      /// Locales: ru
      static func premium_description_three(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_description_three", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_description_three"
        }

        return NSLocalizedString("premium_description_three", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Выберите группу крови
      ///
      /// Locales: ru
      static func chooseBloodGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseBloodGroup", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "chooseBloodGroup"
        }

        return NSLocalizedString("chooseBloodGroup", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Выберите период предполагаемого зачатия
      ///
      /// Locales: ru
      static func chooseConceptionDatePeriod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseConceptionDatePeriod", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "chooseConceptionDatePeriod"
        }

        return NSLocalizedString("chooseConceptionDatePeriod", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Выберите пол будущего ребенка
      ///
      /// Locales: ru
      static func choosePlannedBabyGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choosePlannedBabyGender", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "choosePlannedBabyGender"
        }

        return NSLocalizedString("choosePlannedBabyGender", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Выберите пол родителя
      ///
      /// Locales: ru
      static func chooseParentGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseParentGender", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "chooseParentGender"
        }

        return NSLocalizedString("chooseParentGender", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Выбрать из сохраненных
      ///
      /// Locales: ru
      static func dropDown_chooseSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropDown_chooseSaved", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dropDown_chooseSaved"
        }

        return NSLocalizedString("dropDown_chooseSaved", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Группа крови
      ///
      /// Locales: ru
      static func bloodGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodGroup", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodGroup"
        }

        return NSLocalizedString("bloodGroup", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: ДД/ММ/ГГГГ
      ///
      /// Locales: ru
      static func dateFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dateFormat", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dateFormat"
        }

        return NSLocalizedString("dateFormat", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата зачатия: 
      ///
      /// Locales: ru
      static func conceptionDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("conceptionDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "conceptionDate"
        }

        return NSLocalizedString("conceptionDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата потери крови
      ///
      /// Locales: ru
      static func bloodLoss_date_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodLoss_date_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodLoss_date_title"
        }

        return NSLocalizedString("bloodLoss_date_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата рождения
      ///
      /// Locales: ru
      static func birthdayDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthdayDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "birthdayDate"
        }

        return NSLocalizedString("birthdayDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата рождения матери
      ///
      /// Locales: ru
      static func femaleBirthdayDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("femaleBirthdayDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "femaleBirthdayDate"
        }

        return NSLocalizedString("femaleBirthdayDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата рождения отца
      ///
      /// Locales: ru
      static func maleBirthdayDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maleBirthdayDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "maleBirthdayDate"
        }

        return NSLocalizedString("maleBirthdayDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Дата рождения ребенка
      ///
      /// Locales: ru
      static func babyBirthdayDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("babyBirthdayDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "babyBirthdayDate"
        }

        return NSLocalizedString("babyBirthdayDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Декабрь
      ///
      /// Locales: ru
      static func december(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("december", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "december"
        }

        return NSLocalizedString("december", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Донорство
      ///
      /// Locales: ru
      static func bloodDonation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodDonation", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodDonation"
        }

        return NSLocalizedString("bloodDonation", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Женский
      ///
      /// Locales: ru
      static func femaleGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("femaleGender", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "femaleGender"
        }

        return NSLocalizedString("femaleGender", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Идет приобретение подписки
      ///
      /// Locales: ru
      static func purchasing_subscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchasing_subscription", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "purchasing_subscription"
        }

        return NSLocalizedString("purchasing_subscription", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Имя родителя
      ///
      /// Locales: ru
      static func parentName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("parentName", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "parentName"
        }

        return NSLocalizedString("parentName", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Июль
      ///
      /// Locales: ru
      static func july(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("july", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "july"
        }

        return NSLocalizedString("july", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Июнь
      ///
      /// Locales: ru
      static func june(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("june", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "june"
        }

        return NSLocalizedString("june", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: К потери крови относится :
      ///
      /// Locales: ru
      static func relatedToBloodLoss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("relatedToBloodLoss", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "relatedToBloodLoss"
        }

        return NSLocalizedString("relatedToBloodLoss", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Календарь фертильности
      ///
      /// Locales: ru
      static func sideMenu_calendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_calendar", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_calendar"
        }

        return NSLocalizedString("sideMenu_calendar", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Купить
      ///
      /// Locales: ru
      static func buttonBuy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buttonBuy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "buttonBuy"
        }

        return NSLocalizedString("buttonBuy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Май
      ///
      /// Locales: ru
      static func may(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("may", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "may"
        }

        return NSLocalizedString("may", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Март
      ///
      /// Locales: ru
      static func march(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("march", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "march"
        }

        return NSLocalizedString("march", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Мать
      ///
      /// Locales: ru
      static func mother_section_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mother_section_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "mother_section_title"
        }

        return NSLocalizedString("mother_section_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Меню
      ///
      /// Locales: ru
      static func sideMenu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_title"
        }

        return NSLocalizedString("sideMenu_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Метод Фреймана-Добротина
      ///
      /// Locales: ru
      static func freymanDobrotingMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("freymanDobrotingMethod", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "freymanDobrotingMethod"
        }

        return NSLocalizedString("freymanDobrotingMethod", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Метод обновления крови
      ///
      /// Locales: ru
      static func bloodRenewalMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodRenewalMethod", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodRenewalMethod"
        }

        return NSLocalizedString("bloodRenewalMethod", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Мужской
      ///
      /// Locales: ru
      static func maleGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maleGender", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "maleGender"
        }

        return NSLocalizedString("maleGender", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Написать разработчикам
      ///
      /// Locales: ru
      static func sideMenu_write(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_write", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_write"
        }

        return NSLocalizedString("sideMenu_write", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Не все поля были заполнены
      ///
      /// Locales: ru
      static func toast_missingInput(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_missingInput", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "toast_missingInput"
        }

        return NSLocalizedString("toast_missingInput", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Не найдено ни одной благоприятной даты. Попробуйте увеличить сроки поиска
      ///
      /// Locales: ru
      static func toast_noFavorableDates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_noFavorableDates", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "toast_noFavorableDates"
        }

        return NSLocalizedString("toast_noFavorableDates", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Не удалось приобрести подписку
      ///
      /// Locales: ru
      static func purchasing_subscription_failure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchasing_subscription_failure", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "purchasing_subscription_failure"
        }

        return NSLocalizedString("purchasing_subscription_failure", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Необходимо указать дату последней потери крови
      ///
      /// Locales: ru
      static func lastDateOfBloodLossRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastDateOfBloodLossRequired", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "lastDateOfBloodLossRequired"
        }

        return NSLocalizedString("lastDateOfBloodLossRequired", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Ноябрь
      ///
      /// Locales: ru
      static func november(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("november", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "november"
        }

        return NSLocalizedString("november", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: О приложении
      ///
      /// Locales: ru
      static func sideMenu_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_about", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_about"
        }

        return NSLocalizedString("sideMenu_about", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: ОК
      ///
      /// Locales: ru
      static func alert_ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ok", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "alert_ok"
        }

        return NSLocalizedString("alert_ok", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Октябрь
      ///
      /// Locales: ru
      static func october(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("october", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "october"
        }

        return NSLocalizedString("october", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Отец
      ///
      /// Locales: ru
      static func father_section_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("father_section_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "father_section_title"
        }

        return NSLocalizedString("father_section_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Отмена
      ///
      /// Locales: ru
      static func alert_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_cancel", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "alert_cancel"
        }

        return NSLocalizedString("alert_cancel", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Отменить
      ///
      /// Locales: ru
      static func button_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_cancel", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "button_cancel"
        }

        return NSLocalizedString("button_cancel", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Переливание крови
      ///
      /// Locales: ru
      static func bloodTransition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodTransition", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodTransition"
        }

        return NSLocalizedString("bloodTransition", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static func page_title_genderPlanning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_title_genderPlanning", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "page_title_genderPlanning"
        }

        return NSLocalizedString("page_title_genderPlanning", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static func premium_title_one(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_title_one", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_title_one"
        }

        return NSLocalizedString("premium_title_one", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Планирование пола ребенка
      ///
      /// Locales: ru
      static func sideMenu_planning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_planning", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_planning"
        }

        return NSLocalizedString("sideMenu_planning", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Планировать
      ///
      /// Locales: ru
      static func planning_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("planning_button_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "planning_button_title"
        }

        return NSLocalizedString("planning_button_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Пн
      ///
      /// Locales: ru
      static func dayOfWeek_short_monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_monday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_monday"
        }

        return NSLocalizedString("dayOfWeek_short_monday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: По данному методу одинаковый шанс на зачатие мальчика или девочки
      ///
      /// Locales: ru
      static func toast_unknownGender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_unknownGender", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "toast_unknownGender"
        }

        return NSLocalizedString("toast_unknownGender", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Подписка успешно приобретена
      ///
      /// Locales: ru
      static func purchasing_subscription_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchasing_subscription_success", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "purchasing_subscription_success"
        }

        return NSLocalizedString("purchasing_subscription_success", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Подробнее о методе
      ///
      /// Locales: ru
      static func aboutMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutMethod", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "aboutMethod"
        }

        return NSLocalizedString("aboutMethod", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Подробнее о методе
      ///
      /// Locales: ru
      static func page_title_aboutMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_title_aboutMethod", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "page_title_aboutMethod"
        }

        return NSLocalizedString("page_title_aboutMethod", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Подтверждение удаления
      ///
      /// Locales: ru
      static func alert_delete_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_delete_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "alert_delete_title"
        }

        return NSLocalizedString("alert_delete_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Поздравляем!  У вас будет девочка!
      ///
      /// Locales: ru
      static func youHaveAGirl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youHaveAGirl", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "youHaveAGirl"
        }

        return NSLocalizedString("youHaveAGirl", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Поздравляем!  У вас будет мальчик!
      ///
      /// Locales: ru
      static func youHaveABoy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youHaveABoy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "youHaveABoy"
        }

        return NSLocalizedString("youHaveABoy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Показать все даты
      ///
      /// Locales: ru
      static func showAllDates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showAllDates", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "showAllDates"
        }

        return NSLocalizedString("showAllDates", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Полостная операция или лапароскопи́я
      ///
      /// Locales: ru
      static func laparoscopy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("laparoscopy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "laparoscopy"
        }

        return NSLocalizedString("laparoscopy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Понедельник
      ///
      /// Locales: ru
      static func dayOfWeek_monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_monday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_monday"
        }

        return NSLocalizedString("dayOfWeek_monday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Потеря крови
      ///
      /// Locales: ru
      static func bloodLoss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodLoss", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "bloodLoss"
        }

        return NSLocalizedString("bloodLoss", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Потеря плода
      ///
      /// Locales: ru
      static func fetalLoss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fetalLoss", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "fetalLoss"
        }

        return NSLocalizedString("fetalLoss", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Появится возможность сохранить данные о родителях, чтобы при повторном расчете не вводить их заново.
      ///
      /// Locales: ru
      static func premium_description_two(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_description_two", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_description_two"
        }

        return NSLocalizedString("premium_description_two", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Предположительная дата зачатия
      ///
      /// Locales: ru
      static func estimatedConceptionDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("estimatedConceptionDate", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "estimatedConceptionDate"
        }

        return NSLocalizedString("estimatedConceptionDate", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Преимущества
      ///
      /// Locales: ru
      static func premium_title_three(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_title_three", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_title_three"
        }

        return NSLocalizedString("premium_title_three", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Премиум подписка
      ///
      /// Locales: ru
      static func sideMenu_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_premium", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_premium"
        }

        return NSLocalizedString("sideMenu_premium", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Прерывание беременности
      ///
      /// Locales: ru
      static func abortion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("abortion", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "abortion"
        }

        return NSLocalizedString("abortion", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Принять
      ///
      /// Locales: ru
      static func button_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_done", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "button_done"
        }

        return NSLocalizedString("button_done", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Приобретите премиум подписку и спланируйте пол будущего ребенка. Сохраняйте результаты с благоприятными датами зачатия и информацией о родителях для последующих расчетов
      ///
      /// Locales: ru
      static func subscription_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_description", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_description"
        }

        return NSLocalizedString("subscription_description", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Проверка на рожденных детях
      ///
      /// Locales: ru
      static func checkOnBornChildrens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkOnBornChildrens", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "checkOnBornChildrens"
        }

        return NSLocalizedString("checkOnBornChildrens", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Пт
      ///
      /// Locales: ru
      static func dayOfWeek_short_friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_friday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_friday"
        }

        return NSLocalizedString("dayOfWeek_short_friday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Пятница
      ///
      /// Locales: ru
      static func dayOfWeek_friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_friday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_friday"
        }

        return NSLocalizedString("dayOfWeek_friday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Рассчитать
      ///
      /// Locales: ru
      static func calculate_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calculate_button_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "calculate_button_title"
        }

        return NSLocalizedString("calculate_button_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Расчет
      ///
      /// Locales: ru
      static func calculation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calculation", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "calculation"
        }

        return NSLocalizedString("calculation", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Резус-фактор
      ///
      /// Locales: ru
      static func rhesusFactor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rhesusFactor", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "rhesusFactor"
        }

        return NSLocalizedString("rhesusFactor", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Рекомендации
      ///
      /// Locales: ru
      static func page_title_recommendations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_title_recommendations", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "page_title_recommendations"
        }

        return NSLocalizedString("page_title_recommendations", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Рекомендации
      ///
      /// Locales: ru
      static func recommendations_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommendations_button_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "recommendations_button_title"
        }

        return NSLocalizedString("recommendations_button_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Родители
      ///
      /// Locales: ru
      static func page_title_parents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_title_parents", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "page_title_parents"
        }

        return NSLocalizedString("page_title_parents", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Родители
      ///
      /// Locales: ru
      static func sideMenu_parents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_parents", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_parents"
        }

        return NSLocalizedString("sideMenu_parents", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Роды (первые или последние)
      ///
      /// Locales: ru
      static func givingBirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("givingBirth", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "givingBirth"
        }

        return NSLocalizedString("givingBirth", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сб
      ///
      /// Locales: ru
      static func dayOfWeek_short_saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_saturday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_saturday"
        }

        return NSLocalizedString("dayOfWeek_short_saturday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сентябрь
      ///
      /// Locales: ru
      static func september(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("september", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "september"
        }

        return NSLocalizedString("september", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сколько недель длилась беременность
      ///
      /// Locales: ru
      static func pregnancyDuration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pregnancyDuration", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "pregnancyDuration"
        }

        return NSLocalizedString("pregnancyDuration", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохранение родителей
      ///
      /// Locales: ru
      static func premium_title_two(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premium_title_two", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "premium_title_two"
        }

        return NSLocalizedString("premium_title_two", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохранение родителя
      ///
      /// Locales: ru
      static func parent_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("parent_screen_title", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "parent_screen_title"
        }

        return NSLocalizedString("parent_screen_title", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохраненные расчеты
      ///
      /// Locales: ru
      static func sideMenu_savedResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_savedResults", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_savedResults"
        }

        return NSLocalizedString("sideMenu_savedResults", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохранить
      ///
      /// Locales: ru
      static func buttonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buttonSave", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "buttonSave"
        }

        return NSLocalizedString("buttonSave", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохранить маму
      ///
      /// Locales: ru
      static func dropDown_saveMother(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropDown_saveMother", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dropDown_saveMother"
        }

        return NSLocalizedString("dropDown_saveMother", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Сохранить отца
      ///
      /// Locales: ru
      static func dropDown_saveFather(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dropDown_saveFather", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dropDown_saveFather"
        }

        return NSLocalizedString("dropDown_saveFather", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Ср
      ///
      /// Locales: ru
      static func dayOfWeek_short_wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_wednesday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_wednesday"
        }

        return NSLocalizedString("dayOfWeek_short_wednesday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Среда
      ///
      /// Locales: ru
      static func dayOfWeek_wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_wednesday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_wednesday"
        }

        return NSLocalizedString("dayOfWeek_wednesday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Суббота
      ///
      /// Locales: ru
      static func dayOfWeek_saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_saturday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_saturday"
        }

        return NSLocalizedString("dayOfWeek_saturday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: У вас Девочка?  Вероятные даты зачатия:
      ///
      /// Locales: ru
      static func doYouHaveAGirl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("doYouHaveAGirl", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "doYouHaveAGirl"
        }

        return NSLocalizedString("doYouHaveAGirl", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: У вас Мальчик?  Вероятные даты зачатия:
      ///
      /// Locales: ru
      static func doYouHaveABoy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("doYouHaveABoy", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "doYouHaveABoy"
        }

        return NSLocalizedString("doYouHaveABoy", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Удалить
      ///
      /// Locales: ru
      static func alert_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_delete", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "alert_delete"
        }

        return NSLocalizedString("alert_delete", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Узнать пол ребенка
      ///
      /// Locales: ru
      static func page_title_genderPrediction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_title_genderPrediction", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "page_title_genderPrediction"
        }

        return NSLocalizedString("page_title_genderPrediction", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Узнать пол ребенка
      ///
      /// Locales: ru
      static func sideMenu_genderPrediction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sideMenu_genderPrediction", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "sideMenu_genderPrediction"
        }

        return NSLocalizedString("sideMenu_genderPrediction", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Февраль
      ///
      /// Locales: ru
      static func february(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("february", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "february"
        }

        return NSLocalizedString("february", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Четверг
      ///
      /// Locales: ru
      static func dayOfWeek_thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_thursday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_thursday"
        }

        return NSLocalizedString("dayOfWeek_thursday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Чт
      ///
      /// Locales: ru
      static func dayOfWeek_short_thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dayOfWeek_short_thursday", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "dayOfWeek_short_thursday"
        }

        return NSLocalizedString("dayOfWeek_short_thursday", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Экономия при годовой подписке - $4
      ///
      /// Locales: ru
      static func subscription_oneYear_saving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_oneYear_saving", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_oneYear_saving"
        }

        return NSLocalizedString("subscription_oneYear_saving", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Экономия при подписке на 3 месяца - $0,5
      ///
      /// Locales: ru
      static func subscription_threeMonths_saving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_threeMonths_saving", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_threeMonths_saving"
        }

        return NSLocalizedString("subscription_threeMonths_saving", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Экономия при подписке на 6 месяцев - $1,5
      ///
      /// Locales: ru
      static func subscription_sixMonths_saving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_sixMonths_saving", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "subscription_sixMonths_saving"
        }

        return NSLocalizedString("subscription_sixMonths_saving", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      /// ru translation: Январь
      ///
      /// Locales: ru
      static func january(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("january", tableName: "Localizable.string", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable.string", preferredLanguages: preferredLanguages) else {
          return "january"
        }

        return NSLocalizedString("january", tableName: "Localizable.string", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
